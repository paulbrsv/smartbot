"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å SmartBot –Ω–∞ Streamlit.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π UI –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π.
"""

import streamlit as st
import requests
import json
import os
import base64
from datetime import datetime
from typing import List, Dict, Any, Optional
import pandas as pd
from PIL import Image
import io

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="SmartBot RAG Assistant",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# URL API
API_URL = os.getenv("SMARTBOT_API_URL", "http://localhost:8000")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if "messages" not in st.session_state:
    st.session_state.messages = []
if "uploaded_files" not in st.session_state:
    st.session_state.uploaded_files = []
if "current_model" not in st.session_state:
    st.session_state.current_model = None
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []


def get_api_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
    try:
        response = requests.get(f"{API_URL}/api/status", timeout=5)
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None


def upload_files(files):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ API"""
    try:
        files_data = []
        for file in files:
            files_data.append(
                ("files", (file.name, file.getvalue(), file.type))
            )
        
        response = requests.post(
            f"{API_URL}/api/upload",
            files=files_data
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"Upload failed: {response.text}"}
    except Exception as e:
        return {"error": str(e)}


def send_message(query: str, images: Optional[List[Any]] = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        request_data = {
            "query": query,
            "chat_history": st.session_state.chat_history[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            "llm_settings": {
                "provider": st.session_state.get("provider", "ollama"),
                "model": st.session_state.get("model", "llama3.1:8b"),
                "temperature": st.session_state.get("temperature", 0.7)
            }
        }
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –≤ base64
        if images:
            image_data = []
            for img in images:
                if isinstance(img, bytes):
                    image_data.append(base64.b64encode(img).decode())
                elif hasattr(img, "read"):
                    image_data.append(base64.b64encode(img.read()).decode())
            request_data["image_data"] = image_data
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            f"{API_URL}/api/chat",
            json=request_data,
            timeout=60
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"Chat request failed: {response.text}"}
    except Exception as e:
        return {"error": str(e)}


def get_documents():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        response = requests.get(f"{API_URL}/api/documents")
        if response.status_code == 200:
            return response.json()
        return []
    except:
        return []


def delete_document(doc_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        response = requests.delete(f"{API_URL}/api/documents/{doc_id}")
        return response.status_code == 200
    except:
        return False


def submit_feedback(query_id: str, rating: int, comment: str = ""):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    try:
        response = requests.post(
            f"{API_URL}/api/feedback",
            json={
                "query_id": query_id,
                "rating": rating,
                "comment": comment
            }
        )
        return response.status_code == 200
    except:
        return False


# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ SmartBot RAG Assistant")
    st.markdown("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç —Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
    api_status = get_api_status()
    if not api_status:
        st.error("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        st.subheader("–Ø–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å")
        available_models = api_status.get("available_models", {})
        
        provider = st.selectbox(
            "–ü—Ä–æ–≤–∞–π–¥–µ—Ä",
            options=list(available_models.keys()),
            index=0 if available_models else None
        )
        
        if provider and provider in available_models:
            model = st.selectbox(
                "–ú–æ–¥–µ–ª—å",
                options=available_models[provider],
                index=0 if available_models[provider] else None
            )
            st.session_state.provider = provider
            st.session_state.model = model
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        temperature = st.slider(
            "Temperature",
            min_value=0.0,
            max_value=2.0,
            value=0.7,
            step=0.1
        )
        st.session_state.temperature = temperature
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats = api_status.get("statistics", {})
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤", stats.get("total_documents", 0))
            st.metric("–ó–∞–ø—Ä–æ—Å–æ–≤", stats.get("total_queries", 0))
        with col2:
            st.metric("–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞", stats.get("unanswered_queries", 0))
            st.metric("–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î", api_status.get("vector_store", {}).get("status", "unknown"))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        st.subheader("üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã")
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"):
            st.rerun()
        
        documents = get_documents()
        if documents:
            st.write(f"–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            for doc in documents[:5]:
                with st.expander(f"üìÑ {doc['filename']}", expanded=False):
                    st.write(f"**–¢–∏–ø:** {doc['filetype']}")
                    st.write(f"**–†–∞–∑–º–µ—Ä:** {doc['size_bytes'] / 1024:.1f} KB")
                    st.write(f"**–ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω:** {doc['indexed_at']}")
                    if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"del_{doc['id']}"):
                        if delete_document(doc['id']):
                            st.success("–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
                            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    tabs = st.tabs(["üí¨ –ß–∞—Ç", "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "üìú –ò—Å—Ç–æ—Ä–∏—è", "‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ"])
    
    # –í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞
    with tabs[0]:
        # –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        messages_container = st.container()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        with messages_container:
            for message in st.session_state.messages:
                with st.chat_message(message["role"]):
                    st.markdown(message["content"])
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                    if message.get("sources"):
                        with st.expander("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏"):
                            for source in message["sources"]:
                                st.write(f"- {source.get('title', '–î–æ–∫—É–º–µ–Ω—Ç')}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å query_id, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                    if message.get("metadata", {}).get("query_id"):
                        query_id = message["metadata"]["query_id"]
                        col1, col2, col3, col4, col5 = st.columns(5)
                        with col1:
                            if st.button("üëç", key=f"like_{query_id}"):
                                submit_feedback(query_id, 5)
                                st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
                        with col2:
                            if st.button("üëé", key=f"dislike_{query_id}"):
                                submit_feedback(query_id, 1)
                                st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
        
        # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞
        with st.form("chat_form", clear_on_submit=True):
            col1, col2 = st.columns([4, 1])
            
            with col1:
                user_input = st.text_area(
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
                    height=100,
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?"
                )
            
            with col2:
                uploaded_images = st.file_uploader(
                    "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    type=["png", "jpg", "jpeg", "gif", "bmp"],
                    accept_multiple_files=True,
                    label_visibility="collapsed"
                )
                
                submit_button = st.form_submit_button(
                    "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                    use_container_width=True
                )
            
            if submit_button and user_input:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                st.session_state.messages.append({
                    "role": "user",
                    "content": user_input
                })
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                with st.spinner("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    response = send_message(user_input, uploaded_images)
                    
                    if "error" in response:
                        st.error(f"–û—à–∏–±–∫–∞: {response['error']}")
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": response["response"],
                            "sources": response.get("sources", []),
                            "metadata": response.get("metadata", {})
                        })
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
                        st.session_state.chat_history.append({
                            "role": "user",
                            "content": user_input
                        })
                        st.session_state.chat_history.append({
                            "role": "assistant",
                            "content": response["response"]
                        })
                
                st.rerun()
    
    # –í–∫–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    with tabs[1]:
        st.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
        st.markdown("""
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        - –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF, DOCX, DOC, TXT, RTF
        - –î–∞–Ω–Ω—ã–µ: JSON, XML, CSV, XLSX
        - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, TIFF (—Å OCR)
        - –í–µ–±: HTML, Markdown
        - –ê—Ä—Ö–∏–≤—ã: ZIP, RAR
        """)
        
        uploaded_files = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã",
            accept_multiple_files=True,
            type=["pdf", "docx", "doc", "txt", "rtf", "json", "xml", 
                  "csv", "xlsx", "jpg", "jpeg", "png", "tiff", "html", 
                  "md", "zip", "rar"]
        )
        
        if st.button("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", disabled=not uploaded_files):
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
                result = upload_files(uploaded_files)
                
                if "error" in result:
                    st.error(f"–û—à–∏–±–∫–∞: {result['error']}")
                else:
                    st.success("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for file_result in result.get("files", []):
                        if file_result["status"] == "queued":
                            st.info(f"‚úÖ {file_result['filename']} - –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
                        else:
                            st.error(f"‚ùå {file_result['filename']} - {file_result['message']}")
    
    # –í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    with tabs[2]:
        st.header("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        try:
            response = requests.get(f"{API_URL}/api/history")
            if response.status_code == 200:
                history = response.json()
                
                if history:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    df = pd.DataFrame(history)
                    
                    # –§–∏–ª—å—Ç—Ä—ã
                    col1, col2 = st.columns(2)
                    with col1:
                        search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º")
                    with col2:
                        show_rated = st.checkbox("–¢–æ–ª—å–∫–æ —Å –æ—Ü–µ–Ω–∫–∞–º–∏", value=False)
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    if search_query:
                        df = df[df["query"].str.contains(search_query, case=False)]
                    if show_rated:
                        df = df[df["rating"].notna()]
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    for _, row in df.iterrows():
                        with st.expander(f"‚ùì {row['query'][:100]}...", expanded=False):
                            st.write(f"**–û—Ç–≤–µ—Ç:** {row['response'][:500]}...")
                            st.write(f"**–î–∞—Ç–∞:** {row['created_at']}")
                            if row.get("rating"):
                                st.write(f"**–û—Ü–µ–Ω–∫–∞:** {'‚≠ê' * int(row['rating'])}")
                else:
                    st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    # –í–∫–ª–∞–¥–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    with tabs[3]:
        st.header("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
        st.markdown("""
        ### SmartBot RAG Assistant
        
        **–í–µ—Ä—Å–∏—è:** 1.0.0
        
        **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
        - üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        - ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG
        - üìÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
        - üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å OCR
        - üí¨ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        - üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
        
        **–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:**
        - `Ctrl+Enter` - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        - `Esc` - –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
        
        **–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:**
        - `/help` - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        - `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        - `/clear` - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        - `/settings` - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"):
            st.session_state.messages = []
            st.session_state.chat_history = []
            st.success("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
            st.rerun()


if __name__ == "__main__":
    main()